import AsyncStorage from '@react-native-async-storage/async-storage';

export type Language = 'es' | 'en' | 'ru';

interface Translations {
  // Welcome Screen
  welcomeTitle: string;
  welcomeSubtitle: string;
  features: {
    catalog: string;
    payments: string;
    delivery: string;
    tracking: string;
  };
  buttons: {
    login: string;
    register: string;
    browseWithoutAccount: string;
  };
  // Auth
  auth: {
    loginTitle: string;
    registerTitle: string;
    email: string;
    password: string;
    confirmPassword: string;
    fullName: string;
    phone: string;
    loginButton: string;
    registerButton: string;
    noAccount: string;
    hasAccount: string;
    registerHere: string;
    loginHere: string;
    accountType: string;
    customerRole: string;
    storeRole: string;
    deliveryRole: string;
  };
  // Common
  common: {
    back: string;
    loading: string;
    error: string;
    success: string;
  };
}

const translations: Record<Language, Translations> = {
  es: {
    welcomeTitle: 'EcuaDelivery',
    welcomeSubtitle: 'Tu app de delivery favorita en Ecuador',
    features: {
      catalog: 'üõí Cat√°logo completo de productos',
      payments: 'üí≥ Pagos seguros con tarjeta',
      delivery: 'üöö Entrega r√°pida a domicilio',
      tracking: 'üì± Seguimiento en tiempo real',
    },
    buttons: {
      login: 'Iniciar Sesi√≥n',
      register: 'Registrarse',
      browseWithoutAccount: 'Explorar sin cuenta',
    },
    auth: {
      loginTitle: 'Iniciar Sesi√≥n',
      registerTitle: 'Crear Cuenta',
      email: 'Email',
      password: 'Contrase√±a',
      confirmPassword: 'Confirmar contrase√±a',
      fullName: 'Nombre completo',
      phone: 'Tel√©fono',
      loginButton: 'Iniciar Sesi√≥n',
      registerButton: 'Crear Cuenta',
      noAccount: '¬øNo tienes cuenta? ',
      hasAccount: '¬øYa tienes cuenta? ',
      registerHere: 'Reg√≠strate aqu√≠',
      loginHere: 'Inicia sesi√≥n aqu√≠',
      accountType: 'Tipo de cuenta',
      customerRole: 'Cliente',
      storeRole: 'Tienda',
      deliveryRole: 'Repartidor',
    },
    common: {
      back: 'Atr√°s',
      loading: 'Cargando...',
      error: 'Error',
      success: '√âxito',
    },
  },
  en: {
    welcomeTitle: 'EcuaDelivery',
    welcomeSubtitle: 'Your favorite delivery app in Ecuador',
    features: {
      catalog: 'üõí Complete product catalog',
      payments: 'üí≥ Secure card payments',
      delivery: 'üöö Fast home delivery',
      tracking: 'üì± Real-time tracking',
    },
    buttons: {
      login: 'Sign In',
      register: 'Sign Up',
      browseWithoutAccount: 'Browse without account',
    },
    auth: {
      loginTitle: 'Sign In',
      registerTitle: 'Create Account',
      email: 'Email',
      password: 'Password',
      confirmPassword: 'Confirm password',
      fullName: 'Full name',
      phone: 'Phone',
      loginButton: 'Sign In',
      registerButton: 'Create Account',
      noAccount: "Don't have an account? ",
      hasAccount: 'Already have an account? ',
      registerHere: 'Register here',
      loginHere: 'Sign in here',
      accountType: 'Account type',
      customerRole: 'Customer',
      storeRole: 'Store',
      deliveryRole: 'Delivery',
    },
    common: {
      back: 'Back',
      loading: 'Loading...',
      error: 'Error',
      success: 'Success',
    },
  },
  ru: {
    welcomeTitle: 'EcuaDelivery',
    welcomeSubtitle: '–í–∞—à–µ –ª—é–±–∏–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –≠–∫–≤–∞–¥–æ—Ä–µ',
    features: {
      catalog: 'üõí –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
      payments: 'üí≥ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–∞—Ä—Ç–æ–π',
      delivery: 'üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –¥–æ–º',
      tracking: 'üì± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
    },
    buttons: {
      login: '–í–æ–π—Ç–∏',
      register: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      browseWithoutAccount: '–ü—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–∞',
    },
    auth: {
      loginTitle: '–í–æ–π—Ç–∏',
      registerTitle: '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
      email: 'Email',
      password: '–ü–∞—Ä–æ–ª—å',
      confirmPassword: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å',
      fullName: '–ü–æ–ª–Ω–æ–µ –∏–º—è',
      phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
      loginButton: '–í–æ–π—Ç–∏',
      registerButton: '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
      noAccount: '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? ',
      hasAccount: '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? ',
      registerHere: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å',
      loginHere: '–í–æ–π–¥–∏—Ç–µ',
      accountType: '–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞',
      customerRole: '–ö–ª–∏–µ–Ω—Ç',
      storeRole: '–ú–∞–≥–∞–∑–∏–Ω',
      deliveryRole: '–î–æ—Å—Ç–∞–≤—â–∏–∫',
    },
    common: {
      back: '–ù–∞–∑–∞–¥',
      loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
      error: '–û—à–∏–±–∫–∞',
      success: '–£—Å–ø–µ—Ö',
    },
  },
};

class SimpleI18n {
  private currentLanguage: Language = 'es';

  async init() {
    try {
      const stored = await AsyncStorage.getItem('app_language');
      if (stored && ['es', 'en', 'ru'].includes(stored)) {
        this.currentLanguage = stored as Language;
      }
    } catch (error) {
      console.error('Error loading language:', error);
    }
  }

  async setLanguage(language: Language) {
    this.currentLanguage = language;
    try {
      await AsyncStorage.setItem('app_language', language);
    } catch (error) {
      console.error('Error saving language:', error);
    }
  }

  getCurrentLanguage(): Language {
    return this.currentLanguage;
  }

  t(key: string): string {
    const keys = key.split('.');
    let value: any = translations[this.currentLanguage];
    
    for (const k of keys) {
      if (value && typeof value === 'object' && k in value) {
        value = value[k];
      } else {
        return key;
      }
    }
    
    return typeof value === 'string' ? value : key;
  }

  getLanguages() {
    return [
      { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
      { code: 'en', name: 'English', flag: 'üá∫üá∏' },
      { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    ];
  }
}

export const i18n = new SimpleI18n();